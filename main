/*
  Main
  
  Contains all logic for reactive UI elements. Unfortunately, due to how Earth Engine Apps works
  internally, we have to do this all in one file. Subsections are defined by additional block comments
  to try and organize this massive file.
*/

// Imports
var map_style = require("users/dawnschumacher/nasa-eej:style/map-style").style;
var map = ui.Map();

var legend_style = require("users/dawnschumacher/nasa-eej:style/legend-style");
var legend = ui.Panel({
  style: legend_style.legend
});

var raster_data = require("users/dawnschumacher/nasa-eej:data/raster").data;
//var vector_data = require("users/dawnschumacher/nasa-eej:data/vector").data;

var about = require("users/dawnschumacher/nasa-eej:panels/about");

/*
  Data Processing
*/

var raster_layer_list = ["None"];

// Iterates over all listed layers, adds them to the map object, and compiles them into a list for use in the UI dropdown element.
for(var layer in raster_data) {
  map.addLayer({
    name: layer,
    eeObject: raster_data[layer]["layer"],
    visParams: raster_data[layer]["visParams"],
    shown : false
  });
  
  raster_layer_list.push(layer);
}

/*
  UI
*/
// Create the base content panel inside the legend.
var content = ui.Panel({
  style: legend_style.panel
});

// Create the base navbar panel.
var navbar = ui.Panel({
  layout: ui.Panel.Layout.flow('vertical'),
  style: legend_style.navbar
});
  
// Create the containing panel for the row of buttons at the top, ensuring they are
// displayed in a horizontal row.
var button_row = ui.Panel({
  layout: ui.Panel.Layout.flow('horizontal'),
})
  
// Create the blue highlight bar that changes position.
var nav_highlight = ui.Panel({
  style: legend_style.nav_highlight
})
  
// Create the buttons. I would do this with a loop but it literally didn't work whatsoever.
var about_button = ui.Button({
  label: "About",
  style: legend_style.navbar_button
})

var explore_button = ui.Button({
  label: "Explore",
  style: legend_style.navbar_button
});

var layer_select_button = ui.Button({
  label: "Layer Select",
  style: legend_style.navbar_button
});

// Add the navbar buttons to the navigation panel.
button_row.add(about_button);
button_row.add(explore_button);
button_row.add(layer_select_button);

about_button.onClick(function() {
  change_section(0)
});
explore_button.onClick(function() {
  change_section(1)
});
layer_select_button.onClick(function() {
  change_section(2)
});

// Construct the final navbar object.
navbar.add(button_row);
navbar.add(nav_highlight);

// Changes the visible section by stretching or shrinking the margin of the blue highlight UI panel.
function change_highlight(section_index) {
  print(section_index);
  
  nav_highlight.style().set({
    margin: "0% 0% 0% " + (33.3 * section_index).toString() + "%"
  });
}

// Changes what is displayed in the "content" ui panel, creating a multi-page scrolling effect.
function change_section(section_index) {

  change_highlight(section_index);
  content.clear();
  
  // Add the corresponding UI elements depending on which tab is pressed.
  switch(section_index) {
    case 0:
      content.add(about.object);
      break;
    case 2:
      content.add(layers);
      break;
  }
}

/*
  Layer Select
  
  The page for granular control over the map layers and map opacity.
*/
var layers = ui.Panel();

var raster_layer = null;
var vector_layer = null;

function redraw_map () {

  map.layers().forEach(function(element, index) {
      element.setShown(raster_layer == element.getName() || vector_layer == element.getName());
  });
}

function set_raster_layer(name) {
  if(name != "None") {
    raster_layer = name;
    
    raster_infobox.clear();
    raster_infobox.add(ui.Label({
      value: raster_data[name]["info"],
      style: legend_style.p
    }));
  }
  else {
    raster_layer = null;
  }
  
  redraw_map();
}

// Raster Layerbox
var raster_layerbox = ui.Panel({
  style: legend_style.rasterbox
});
raster_layerbox.add(ui.Label({
  value: "Background Layer",
  style: legend_style.rasterlabel
}));

var raster_select = ui.Select({
  items: raster_layer_list,
  placeholder: "Select a layer...",
  value: "None",
  style: legend_style.rasterbutton
});
raster_select.onChange(function (layer) {
  
  if(layer != "None") {
    raster_layer = layer
  }
  else {
    raster_layer = null;
  }
  
  redraw_map();
});

var raster_slider = ui.Slider({
  min: 0,
  max: 1,
  value: 1,
  step: 0.01,
  style: legend_style.rasterslider
});

var raster_infobox = ui.Panel();

// Vector Layerbox
var vector_layerbox = ui.Panel({
  style: legend_style.vectorbox
});
vector_layerbox.add(ui.Label({
  value: "Census Layer",
  style: legend_style.vectorlabel
}));

var vector_select_1 = ui.Select({
  items: ["None"],
  placeholder: "Select a layer...",
  value: "None",
  style: legend_style.vectorbutton
});
var vector_select_2 = ui.Select({
  items: ["None"],
  placeholder: "Select a layer...",
  value: "None",
  style: legend_style.vectorbutton
});

var vector_slider = ui.Slider({
  min: 0,
  max: 1,
  value: 1,
  step: 0.01,
  style: legend_style.vectorslider
});

var vector_infobox = ui.Panel();

raster_layerbox.add(raster_select);
raster_layerbox.add(raster_slider);

vector_layerbox.add(vector_select_1);
vector_layerbox.add(vector_select_2);
vector_layerbox.add(vector_slider);

layers.add(raster_layerbox);
layers.add(raster_infobox);
layers.add(vector_layerbox);
layers.add(vector_infobox);

legend.add(navbar);
legend.add(content);

/*
  Map
  
  Contains all of the settings initially applied to the map.
*/
// Sets the map's visual style, creating a grayscale map.
map.setOptions('Map', {
  Map: map_style
},
["Map","SATELLITE"]);

// Modifies the map controls, disabling unnessecary ones to improve readability.
map.setControlVisibility({
    all: false,
    layerList: true,
    zoomControl: true,
    scaleControl: true,
    mapTypeControl: true,
    fullscreenControl: false
});

// Sets the cursor style to a crosshair.
map.style().set('cursor', 'crosshair');

// Centers the map on the San Francisco bay.
map.setCenter(-122.355537, 37.828, 9);

// Replaces the base map with a cleaner, custom map.
ui.root.clear();

var spacer = ui.SplitPanel(
  map, legend
) 

ui.root.add(spacer);

/*
  Init
  
  Initializes the app.
*/
change_section(0);